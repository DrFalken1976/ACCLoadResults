// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ACCLoadResults.Models;

public partial class DataContext : DbContext
{
    public DataContext()
    {
    }

    public DataContext(DbContextOptions<DataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Cars> Cars { get; set; }

    public virtual DbSet<Laps> Laps { get; set; }

    public virtual DbSet<LeaderBoard> LeaderBoard { get; set; }

    public virtual DbSet<RaceTeams> RaceTeams { get; set; }

    public virtual DbSet<SeasonCalendar> SeasonCalendar { get; set; }

    public virtual DbSet<SeasonClassification> SeasonClassification { get; set; }

    public virtual DbSet<SeasonPointsDefinition> SeasonPointsDefinition { get; set; }

    public virtual DbSet<SeasonSessions> SeasonSessions { get; set; }

    public virtual DbSet<Seasons> Seasons { get; set; }

    public virtual DbSet<SeasonsLeaderBoardHistory> SeasonsLeaderBoardHistory { get; set; }

    public virtual DbSet<Sessions> Sessions { get; set; }

    public virtual DbSet<TeamsByRace> TeamsByRace { get; set; }

    public virtual DbSet<Tracks> Tracks { get; set; }

    public virtual DbSet<TypeRace> TypeRace { get; set; }

    public virtual DbSet<TypeSessions> TypeSessions { get; set; }

    public virtual DbSet<TypeWeather> TypeWeather { get; set; }

    public virtual DbSet<penalties> penalties { get; set; }

    public virtual DbSet<vGetClassification> vGetClassification { get; set; }

    public virtual DbSet<vGetCompleteSessions> vGetCompleteSessions { get; set; }

    public virtual DbSet<vGetRaceCSVFile> vGetRaceCSVFile { get; set; }

    public virtual DbSet<vSeasonRaceLeaderBoard> vSeasonRaceLeaderBoard { get; set; }

    public virtual DbSet<vSessionLaps> vSessionLaps { get; set; }

    public virtual DbSet<vSessionLeaderBoard> vSessionLeaderBoard { get; set; }

    public virtual DbSet<vSessionPenalties> vSessionPenalties { get; set; }

    public virtual DbSet<vStatsRaceVsQualy> vStatsRaceVsQualy { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost\\SQLEXPRESS;Initial Catalog=ACCSessionsData;Integrated Security=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Cars>(entity =>
        {
            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.CarModel)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength();
        });

        modelBuilder.Entity<Laps>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.LaptimeNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Sector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Sector1Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Sector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Sector2Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Sector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Sector3Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.laptime)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
        });

        modelBuilder.Entity<LeaderBoard>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.BestLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestLapNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector1Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector2Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector3Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.LastSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector1Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.LastSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector2Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.LastSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector3Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.TotalTime)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.TotalTimeNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.carGroup)
                .IsRequired()
                .HasMaxLength(5)
                .IsFixedLength();
            entity.Property(e => e.firstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.lastLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.lastLapNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.lastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<RaceTeams>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.RaceName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<SeasonCalendar>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Date).HasColumnType("date");
            entity.Property(e => e.IdSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IdTrack).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<SeasonClassification>(entity =>
        {
            entity.HasIndex(e => new { e.IDSeason, e.IDSession, e.IDCalendar, e.NickName, e.Position }, "IX_SeasonClassification").IsUnique();

            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IDCalendar).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IDSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<SeasonPointsDefinition>(entity =>
        {
            entity.HasKey(e => new { e.IDSeason, e.RaceType, e.Position, e.Points });

            entity.Property(e => e.IDSeason).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<SeasonSessions>(entity =>
        {
            entity.HasKey(e => new { e.IdSeason, e.IdSession }).HasName("PK_Season-Sesions");

            entity.Property(e => e.IdSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IdSession).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<Seasons>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.DateEnd).HasColumnType("date");
            entity.Property(e => e.DateStart).HasColumnType("date");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength();
        });

        modelBuilder.Entity<SeasonsLeaderBoardHistory>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.GameTag)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.IdSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IdSession).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IdTemporada)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.MitjaPuntsPerCursa).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<Sessions>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__tmp_ms_x__3214EC27EBAFB415");

            entity.HasIndex(e => e.LogFileName, "IX_Sessions").IsUnique();

            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestLap)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestLapNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector1)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector1Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector2)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector2Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector3)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector3Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.LogFileName)
                .IsRequired()
                .HasMaxLength(80);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.sessionType)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.trackName)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<TeamsByRace>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.GameTag)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GameTagUID)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IDRace).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.TeamName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Tracks>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Lat).HasMaxLength(75);
            entity.Property(e => e.Lon).HasMaxLength(75);
            entity.Property(e => e.TrackName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<TypeRace>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
        });

        modelBuilder.Entity<TypeSessions>(entity =>
        {
            entity.Property(e => e.ID)
                .HasMaxLength(2)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TypeWeather>(entity =>
        {
            entity.Property(e => e.ACCValue)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<penalties>(entity =>
        {
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.penalty)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.reason)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<vGetClassification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGetClassification");

            entity.Property(e => e.GameTag).HasMaxLength(50);
            entity.Property(e => e.IdSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IdTemporada).HasMaxLength(100);
            entity.Property(e => e.MitjaPuntsPerCursa).HasColumnType("decimal(16, 13)");
        });

        modelBuilder.Entity<vGetCompleteSessions>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGetCompleteSessions");

            entity.Property(e => e.BestLap)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestLapNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector1)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector1Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector2)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector2Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.BestSector3)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector3Numeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.CompleteRace).HasMaxLength(163);
            entity.Property(e => e.ID)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.LogFileName)
                .IsRequired()
                .HasMaxLength(80);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.sessionType)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.trackName)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<vGetRaceCSVFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vGetRaceCSVFile");

            entity.Property(e => e.CursaLlarga)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.GameTag).HasMaxLength(50);
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IdCircuit).HasMaxLength(4000);
            entity.Property(e => e.IdTemporada).HasMaxLength(100);
            entity.Property(e => e.InfoPuntsExtres)
                .IsRequired()
                .HasMaxLength(47)
                .IsUnicode(false);
            entity.Property(e => e.Pole)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.VoltaRapida)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vSeasonRaceLeaderBoard>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSeasonRaceLeaderBoard");

            entity.Property(e => e.BestLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestLapNumeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestLapSession)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector1Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector1Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector2Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector2Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector3Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector3Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CarModel).HasMaxLength(107);
            entity.Property(e => e.DateEnd).HasColumnType("date");
            entity.Property(e => e.DateStart).HasColumnType("date");
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.LastLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.RaceMeteorology)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Season)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.TotalTimeNumeric).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.TrackName).HasMaxLength(4000);
        });

        modelBuilder.Entity<vSessionLaps>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSessionLaps");

            entity.Property(e => e.BestLapNumeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestLapSession)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector1Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector1Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector2Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector2Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector3Numeric).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.BestSector3Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.DateEnd).HasColumnType("date");
            entity.Property(e => e.DateStart).HasColumnType("date");
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.RaceMeteorology)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Season)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.Sector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Sector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Sector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.TrackName).HasMaxLength(4000);
            entity.Property(e => e.laptime)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
        });

        modelBuilder.Entity<vSessionLeaderBoard>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSessionLeaderBoard");

            entity.Property(e => e.BestLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestLapSession)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector1Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector2Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.BestSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.BestSector3Session)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CarModel).HasMaxLength(107);
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IdSeason).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.LastLap)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector1)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector2)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.LastSector3)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.RaceMeteorology)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Session)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.SessionHour)
                .IsRequired()
                .HasMaxLength(8)
                .IsFixedLength();
            entity.Property(e => e.TotalTime)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.TotalTimeNumeric).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.TrackName).HasMaxLength(4000);
        });

        modelBuilder.Entity<vSessionPenalties>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vSessionPenalties");

            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.penalty)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.reason)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<vStatsRaceVsQualy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vStatsRaceVsQualy");

            entity.Property(e => e.CarModel).HasMaxLength(107);
            entity.Property(e => e.Diff).HasColumnType("numeric(15, 0)");
            entity.Property(e => e.HotLapPlayerRace)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.HotLapQualy)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.HotLapRace)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.IDQualySession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.IDSession).HasColumnType("numeric(8, 0)");
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.PolePosition)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.RaceMeteorology)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.SessionDate).HasColumnType("date");
            entity.Property(e => e.TotalTime)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.TrackName).HasMaxLength(4000);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}